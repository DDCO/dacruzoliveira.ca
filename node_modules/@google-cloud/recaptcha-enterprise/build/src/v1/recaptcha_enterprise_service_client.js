"use strict";
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecaptchaEnterpriseServiceClient = void 0;
/* global window */
const gax = require("google-gax");
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/recaptcha_enterprise_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./recaptcha_enterprise_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Service to determine the likelihood an event is legitimate.
 * @class
 * @memberof v1
 */
class RecaptchaEnterpriseServiceClient {
    /**
     * Construct an instance of RecaptchaEnterpriseServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this
            .constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gax.fallback : gax;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else if (opts.fallback === 'rest') {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            assessmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/assessments/{assessment}'),
            keyPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/keys/{key}'),
            metricsPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/keys/{key}/metrics'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            relatedAccountGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/relatedaccountgroups/{relatedaccountgroup}'),
            relatedAccountGroupMembershipPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/relatedaccountgroups/{relatedaccountgroup}/memberships/{membership}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listKeys: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'keys'),
            listRelatedAccountGroups: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'relatedAccountGroups'),
            listRelatedAccountGroupMemberships: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'relatedAccountGroupMemberships'),
            searchRelatedAccountGroupMemberships: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'relatedAccountGroupMemberships'),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = gax.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.recaptchaEnterpriseServiceStub) {
            return this.recaptchaEnterpriseServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.
        this.recaptchaEnterpriseServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.recaptchaenterprise.v1
                    .RecaptchaEnterpriseService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const recaptchaEnterpriseServiceStubMethods = [
            'createAssessment',
            'annotateAssessment',
            'createKey',
            'listKeys',
            'getKey',
            'updateKey',
            'deleteKey',
            'migrateKey',
            'getMetrics',
            'listRelatedAccountGroups',
            'listRelatedAccountGroupMemberships',
            'searchRelatedAccountGroupMemberships',
        ];
        for (const methodName of recaptchaEnterpriseServiceStubMethods) {
            const callPromise = this.recaptchaEnterpriseServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] || undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.recaptchaEnterpriseServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'recaptchaenterprise.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'recaptchaenterprise.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    createAssessment(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createAssessment(request, options, callback);
    }
    annotateAssessment(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.annotateAssessment(request, options, callback);
    }
    createKey(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createKey(request, options, callback);
    }
    getKey(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getKey(request, options, callback);
    }
    updateKey(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'key.name': request.key.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateKey(request, options, callback);
    }
    deleteKey(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.deleteKey(request, options, callback);
    }
    migrateKey(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.migrateKey(request, options, callback);
    }
    getMetrics(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getMetrics(request, options, callback);
    }
    listKeys(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listKeys(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the project that contains the keys that will be
     *   listed, in the format "projects/{project}".
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of keys to return. Default is 10. Max limit is
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. The next_page_token value returned from a previous.
     *   ListKeysRequest, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Key]{@link google.cloud.recaptchaenterprise.v1.Key} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listKeysAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listKeysStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listKeys'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listKeys.createStream(this.innerApiCalls.listKeys, request, callSettings);
    }
    /**
     * Equivalent to `listKeys`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the project that contains the keys that will be
     *   listed, in the format "projects/{project}".
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of keys to return. Default is 10. Max limit is
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. The next_page_token value returned from a previous.
     *   ListKeysRequest, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Key]{@link google.cloud.recaptchaenterprise.v1.Key}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/recaptcha_enterprise_service.list_keys.js</caption>
     * region_tag:recaptchaenterprise_v1_generated_RecaptchaEnterpriseService_ListKeys_async
     */
    listKeysAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listKeys'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listKeys.asyncIterate(this.innerApiCalls['listKeys'], request, callSettings);
    }
    listRelatedAccountGroups(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listRelatedAccountGroups(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the project to list related account groups from, in
     *   the format "projects/{project}".
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of groups to return. The service may return
     *   fewer than this value. If unspecified, at most 50 groups will be returned.
     *   The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListRelatedAccountGroups`
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListRelatedAccountGroups` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [RelatedAccountGroup]{@link google.cloud.recaptchaenterprise.v1.RelatedAccountGroup} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listRelatedAccountGroupsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listRelatedAccountGroupsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listRelatedAccountGroups'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRelatedAccountGroups.createStream(this.innerApiCalls.listRelatedAccountGroups, request, callSettings);
    }
    /**
     * Equivalent to `listRelatedAccountGroups`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the project to list related account groups from, in
     *   the format "projects/{project}".
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of groups to return. The service may return
     *   fewer than this value. If unspecified, at most 50 groups will be returned.
     *   The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListRelatedAccountGroups`
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListRelatedAccountGroups` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [RelatedAccountGroup]{@link google.cloud.recaptchaenterprise.v1.RelatedAccountGroup}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/recaptcha_enterprise_service.list_related_account_groups.js</caption>
     * region_tag:recaptchaenterprise_v1_generated_RecaptchaEnterpriseService_ListRelatedAccountGroups_async
     */
    listRelatedAccountGroupsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listRelatedAccountGroups'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRelatedAccountGroups.asyncIterate(this.innerApiCalls['listRelatedAccountGroups'], request, callSettings);
    }
    listRelatedAccountGroupMemberships(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listRelatedAccountGroupMemberships(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name for the related account group in the format
     *   `projects/{project}/relatedaccountgroups/{relatedaccountgroup}`.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of accounts to return. The service may return
     *   fewer than this value. If unspecified, at most 50 accounts will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous
     *   `ListRelatedAccountGroupMemberships` call.
     *
     *   When paginating, all other parameters provided to
     *   `ListRelatedAccountGroupMemberships` must match the call that provided the
     *   page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [RelatedAccountGroupMembership]{@link google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listRelatedAccountGroupMembershipsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listRelatedAccountGroupMembershipsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listRelatedAccountGroupMemberships'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRelatedAccountGroupMemberships.createStream(this.innerApiCalls.listRelatedAccountGroupMemberships, request, callSettings);
    }
    /**
     * Equivalent to `listRelatedAccountGroupMemberships`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name for the related account group in the format
     *   `projects/{project}/relatedaccountgroups/{relatedaccountgroup}`.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of accounts to return. The service may return
     *   fewer than this value. If unspecified, at most 50 accounts will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous
     *   `ListRelatedAccountGroupMemberships` call.
     *
     *   When paginating, all other parameters provided to
     *   `ListRelatedAccountGroupMemberships` must match the call that provided the
     *   page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [RelatedAccountGroupMembership]{@link google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/recaptcha_enterprise_service.list_related_account_group_memberships.js</caption>
     * region_tag:recaptchaenterprise_v1_generated_RecaptchaEnterpriseService_ListRelatedAccountGroupMemberships_async
     */
    listRelatedAccountGroupMembershipsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listRelatedAccountGroupMemberships'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRelatedAccountGroupMemberships.asyncIterate(this.innerApiCalls['listRelatedAccountGroupMemberships'], request, callSettings);
    }
    searchRelatedAccountGroupMemberships(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                project: request.project || '',
            });
        this.initialize();
        return this.innerApiCalls.searchRelatedAccountGroupMemberships(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.project
     *   Required. The name of the project to search related account group
     *   memberships from, in the format "projects/{project}".
     * @param {Buffer} [request.hashedAccountId]
     *   Optional. The unique stable hashed user identifier we should search
     *   connections to. The identifier should correspond to a `hashed_account_id`
     *   provided in a previous CreateAssessment or AnnotateAssessment call.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of groups to return. The service may return
     *   fewer than this value. If unspecified, at most 50 groups will be returned.
     *   The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous
     *   `SearchRelatedAccountGroupMemberships` call. Provide this to retrieve the
     *   subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `SearchRelatedAccountGroupMemberships` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [RelatedAccountGroupMembership]{@link google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `searchRelatedAccountGroupMembershipsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    searchRelatedAccountGroupMembershipsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                project: request.project || '',
            });
        const defaultCallSettings = this._defaults['searchRelatedAccountGroupMemberships'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.searchRelatedAccountGroupMemberships.createStream(this.innerApiCalls.searchRelatedAccountGroupMemberships, request, callSettings);
    }
    /**
     * Equivalent to `searchRelatedAccountGroupMemberships`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.project
     *   Required. The name of the project to search related account group
     *   memberships from, in the format "projects/{project}".
     * @param {Buffer} [request.hashedAccountId]
     *   Optional. The unique stable hashed user identifier we should search
     *   connections to. The identifier should correspond to a `hashed_account_id`
     *   provided in a previous CreateAssessment or AnnotateAssessment call.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of groups to return. The service may return
     *   fewer than this value. If unspecified, at most 50 groups will be returned.
     *   The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous
     *   `SearchRelatedAccountGroupMemberships` call. Provide this to retrieve the
     *   subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `SearchRelatedAccountGroupMemberships` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [RelatedAccountGroupMembership]{@link google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/recaptcha_enterprise_service.search_related_account_group_memberships.js</caption>
     * region_tag:recaptchaenterprise_v1_generated_RecaptchaEnterpriseService_SearchRelatedAccountGroupMemberships_async
     */
    searchRelatedAccountGroupMembershipsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                project: request.project || '',
            });
        const defaultCallSettings = this._defaults['searchRelatedAccountGroupMemberships'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.searchRelatedAccountGroupMemberships.asyncIterate(this.innerApiCalls['searchRelatedAccountGroupMemberships'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified assessment resource name string.
     *
     * @param {string} project
     * @param {string} assessment
     * @returns {string} Resource name string.
     */
    assessmentPath(project, assessment) {
        return this.pathTemplates.assessmentPathTemplate.render({
            project: project,
            assessment: assessment,
        });
    }
    /**
     * Parse the project from Assessment resource.
     *
     * @param {string} assessmentName
     *   A fully-qualified path representing Assessment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAssessmentName(assessmentName) {
        return this.pathTemplates.assessmentPathTemplate.match(assessmentName)
            .project;
    }
    /**
     * Parse the assessment from Assessment resource.
     *
     * @param {string} assessmentName
     *   A fully-qualified path representing Assessment resource.
     * @returns {string} A string representing the assessment.
     */
    matchAssessmentFromAssessmentName(assessmentName) {
        return this.pathTemplates.assessmentPathTemplate.match(assessmentName)
            .assessment;
    }
    /**
     * Return a fully-qualified key resource name string.
     *
     * @param {string} project
     * @param {string} key
     * @returns {string} Resource name string.
     */
    keyPath(project, key) {
        return this.pathTemplates.keyPathTemplate.render({
            project: project,
            key: key,
        });
    }
    /**
     * Parse the project from Key resource.
     *
     * @param {string} keyName
     *   A fully-qualified path representing Key resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromKeyName(keyName) {
        return this.pathTemplates.keyPathTemplate.match(keyName).project;
    }
    /**
     * Parse the key from Key resource.
     *
     * @param {string} keyName
     *   A fully-qualified path representing Key resource.
     * @returns {string} A string representing the key.
     */
    matchKeyFromKeyName(keyName) {
        return this.pathTemplates.keyPathTemplate.match(keyName).key;
    }
    /**
     * Return a fully-qualified metrics resource name string.
     *
     * @param {string} project
     * @param {string} key
     * @returns {string} Resource name string.
     */
    metricsPath(project, key) {
        return this.pathTemplates.metricsPathTemplate.render({
            project: project,
            key: key,
        });
    }
    /**
     * Parse the project from Metrics resource.
     *
     * @param {string} metricsName
     *   A fully-qualified path representing Metrics resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromMetricsName(metricsName) {
        return this.pathTemplates.metricsPathTemplate.match(metricsName).project;
    }
    /**
     * Parse the key from Metrics resource.
     *
     * @param {string} metricsName
     *   A fully-qualified path representing Metrics resource.
     * @returns {string} A string representing the key.
     */
    matchKeyFromMetricsName(metricsName) {
        return this.pathTemplates.metricsPathTemplate.match(metricsName).key;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified relatedAccountGroup resource name string.
     *
     * @param {string} project
     * @param {string} relatedaccountgroup
     * @returns {string} Resource name string.
     */
    relatedAccountGroupPath(project, relatedaccountgroup) {
        return this.pathTemplates.relatedAccountGroupPathTemplate.render({
            project: project,
            relatedaccountgroup: relatedaccountgroup,
        });
    }
    /**
     * Parse the project from RelatedAccountGroup resource.
     *
     * @param {string} relatedAccountGroupName
     *   A fully-qualified path representing RelatedAccountGroup resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromRelatedAccountGroupName(relatedAccountGroupName) {
        return this.pathTemplates.relatedAccountGroupPathTemplate.match(relatedAccountGroupName).project;
    }
    /**
     * Parse the relatedaccountgroup from RelatedAccountGroup resource.
     *
     * @param {string} relatedAccountGroupName
     *   A fully-qualified path representing RelatedAccountGroup resource.
     * @returns {string} A string representing the relatedaccountgroup.
     */
    matchRelatedaccountgroupFromRelatedAccountGroupName(relatedAccountGroupName) {
        return this.pathTemplates.relatedAccountGroupPathTemplate.match(relatedAccountGroupName).relatedaccountgroup;
    }
    /**
     * Return a fully-qualified relatedAccountGroupMembership resource name string.
     *
     * @param {string} project
     * @param {string} relatedaccountgroup
     * @param {string} membership
     * @returns {string} Resource name string.
     */
    relatedAccountGroupMembershipPath(project, relatedaccountgroup, membership) {
        return this.pathTemplates.relatedAccountGroupMembershipPathTemplate.render({
            project: project,
            relatedaccountgroup: relatedaccountgroup,
            membership: membership,
        });
    }
    /**
     * Parse the project from RelatedAccountGroupMembership resource.
     *
     * @param {string} relatedAccountGroupMembershipName
     *   A fully-qualified path representing RelatedAccountGroupMembership resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromRelatedAccountGroupMembershipName(relatedAccountGroupMembershipName) {
        return this.pathTemplates.relatedAccountGroupMembershipPathTemplate.match(relatedAccountGroupMembershipName).project;
    }
    /**
     * Parse the relatedaccountgroup from RelatedAccountGroupMembership resource.
     *
     * @param {string} relatedAccountGroupMembershipName
     *   A fully-qualified path representing RelatedAccountGroupMembership resource.
     * @returns {string} A string representing the relatedaccountgroup.
     */
    matchRelatedaccountgroupFromRelatedAccountGroupMembershipName(relatedAccountGroupMembershipName) {
        return this.pathTemplates.relatedAccountGroupMembershipPathTemplate.match(relatedAccountGroupMembershipName).relatedaccountgroup;
    }
    /**
     * Parse the membership from RelatedAccountGroupMembership resource.
     *
     * @param {string} relatedAccountGroupMembershipName
     *   A fully-qualified path representing RelatedAccountGroupMembership resource.
     * @returns {string} A string representing the membership.
     */
    matchMembershipFromRelatedAccountGroupMembershipName(relatedAccountGroupMembershipName) {
        return this.pathTemplates.relatedAccountGroupMembershipPathTemplate.match(relatedAccountGroupMembershipName).membership;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.recaptchaEnterpriseServiceStub && !this._terminated) {
            return this.recaptchaEnterpriseServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.RecaptchaEnterpriseServiceClient = RecaptchaEnterpriseServiceClient;
//# sourceMappingURL=recaptcha_enterprise_service_client.js.map